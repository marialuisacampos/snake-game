/*Classe principal da cobra*/
class Snake {
    field SnakeGame game;
    field int posX, posY;
    field int length;
    field int growby;
    field int togrow;
    field int dir, lastdir;
    field Array historyX, historyY;
    field int historySize;
    
    //criação de uma nova cobra
    constructor Snake new(SnakeGame Agame, int Ax, int Ay, int Alen, int Agrowby) {
        var int i;
        let game = Agame;
        let posX = Ax - Alen;
        let posY = Ay;
        let length = Alen;
        let growby = Agrowby;

        let togrow = 0;
        let dir = 4;
        let lastdir = 4;
        let historySize = 512;
        let historyX = Array.new(historySize);
        let historyY = Array.new(historySize);

        let i = 0;
        while( i < length ) {
            let posX = posX + 1;
            do drawHead(game.getCycle());
            let i = i + 1;
            do game.nextCycle();
        }
        return this;
    }

    method void dispose() {
        do historyX.dispose();
        do historyY.dispose();
        do Memory.deAlloc(this);
        return;
    }

    
    method boolean checkRewriteHistory() {
        if( game.getCycle() = historySize ) {
            do rewriteHistory();
            return true;
        }
        return false;
    }

   
    method void rewriteHistory() {
        var int i, src, dst;
        let i = length;
        let dst = 0;
        let src = historySize - length;
        while( i > 0 ) {
            let historyX[dst] = historyX[src];
            let historyY[dst] = historyY[src];
            let src = src + 1;
            let dst = dst + 1;
            let i = i - 1;
        }
        return;
    }

    method int posX() {
        return posX;
    }
    method int posY() {
        return posY;
    }
    method int getLength() {
        return length;
    }
    method int getDir() {
        return dir;
    }

    method int getLastDir() {
        return lastdir;
    }

    method void setDir(int newdir) {
        let dir = newdir;
        return;
    }

    method void rememberDir() {
        let lastdir = dir;
        return;
    }

    //checa o movimento
    method boolean tryMove() {
        var SnakeBoard board;
        let board = game.getBoard();
        if( dir = 1 ) { //para cima
            if( posY = 0 ) {
                let posY = board.sizeY();
            }
            else {
                let posY = posY - 1;
            }
        }
        if( dir = 2 ) { //para baixo
            if( posY = board.sizeY() ) {
                let posY = 0;
            }
            else {
                let posY = posY + 1;
            }
        }
        if( dir = 3 ) { //pra esquerda
            if( posX = 0 ) {
                let posX = board.sizeX() -4;
            }
            else {
                let posX = posX - 1;
            }
        }
        if( dir = 4 ) { //pra direita
            if( posX = (board.sizeX() - 2) ) {
                let posX = 0;
            }
            else {
                let posX = posX + 1;
            }
        }

        // confere se a cobra mordeu seu próprio corpo
        if( board.isDraw(posX, posY) ) {
            return false;
        }
        return true;
    }

    method void grow(int cycle) {
        do drawHead(cycle);
        if( togrow > 0 ) {
            let togrow = togrow - 1;
            let length = length + 1;
        }
        else {
            do eraseTail(cycle);
        }
        return;
    }

    method void drawHead(int cycle) {
        var SnakeBoard board;
        let board = game.getBoard();
        do board.drawSnake(posX, posY);
        let historyX[cycle] = posX;
        let historyY[cycle] = posY;
        return;
    }

    method void eraseTail(int cycle) {
        var SnakeBoard board;
        var int tailIndex, tailX, tailY;
        let tailIndex = cycle - length;
        let tailX = historyX[tailIndex];
        let tailY = historyY[tailIndex];
        let board = game.getBoard();
        do board.eraseSnake(tailX, tailY);
        return;
    }

    method void eatFood() {
        let togrow = togrow + growby;
        return;
    }

}